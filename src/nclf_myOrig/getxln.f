C*********************************************************************
C*    NAME         :  getxln.f
C*       CONTAINS:
C*             getxln  getxln_count
C*
C*    COPYRIGHT 2009 (c) Numerical Control Computer Sceinces Inc.
C*    All Rights Reserved.
C*     MODULE NAME AND RELEASE LEVEL
C*       getxln.f , 25.1
C*    DATE AND TIME OF LAST  MODIFICATION
C*       04/29/15 , 15:10:08
C********************************************************************/
c
c***********************************************************************
c
c   SUBROUTINE:  getxln (kline,gindx,ktype,kndx)
c
c   FUNCTION:  This routine returns the current line number along with
c              the call stack line numbers for Macro calls and DO loops.
c              The DO loop index is also returned with the DO loop line
c              number.
c
c              This routine should be called repeatedly to return all line
c              numbers on the call stack.  Calling it once with 'kndx'
c              set to 0 will return the current line number.
c
c
c   INPUT:  kndx     I*4   D1  -  Should be set to 0 on intial call and
c                                 will be adjusted by this routine from
c                                 then on out.
c
c                                 return.  0 = Return entire text.
c
c   OUTPUT: kline    I*4   D1  -  Returns the line numbers on the calling
c                                 stack depending on the value of 'kndx'.
c
c           gndx     R*8   D1  -  DO loop variable when returning a DO
c                                 loop line number.
c
c           ktype    I*4   D1  -  0 = 'kline' is the current line,
c                                 1 = 'kline' is a Macro call,
c                                 2 = 'kline' is a DO loop.
c
c           kndx     I*4   D1  -  Updated to point to the next line
c                                 number on the call stack.  Returns -1
c                                 if there are no more entries on the
c                                 call stack.
c
c***********************************************************************
c
      subroutine getxln (kline,gindx,ktype,kndx)
c
      include 'com8a.com'
c
      integer*4 kline,ktype,kndx
c
      real*8 gindx
c
      integer*2 itmp,inc,itsav,issav
      integer*4 tmp,isbsv,strlen1,tsub,lsub,tline
c
      real*8 tvsv
c
      character*64 ltmp,tsav,mname,lname
c
c...Initialize routine
c
      kline = 0
      gindx = 0
      ktype = 0
c
c...Geometry is not generated by command
c
      if (ifl(388) .eq. 0) go to 9000
c
c...Return current line number
c
      if (kndx .eq. 0) then
c
c......Implicit check surface in effect
c
          if (ifl(215) .gt. 0) then
              kline = ifl4(13)
c
c......Insert mode in effect
c
          else if (ifl(25) .eq. 2) then
              call nclf_src_next_rec (kline)
              kline = kline - ifl(123) + 1
c
c......Standard mode
c
          else
              tline = nline - ifl(123) + 1
              call nclf_src_line_to_rec (tline,kline)
          endif
          kndx = 1
c
c...Return Call stack line
c
      else if (kndx .gt. 0) then
          inc = kndx
  100     if (inc .gt. ifl(174)) go to 9000
          call lrdata (mname,tsub,lname,lsub,kline,tmp,tmp,itmp,itmp,
     1                 ltmp,tmp,inc)
          inc = inc + 1
          if (mname .eq. "LOOPST") then
              go to 100
c
c......Macro Call
c
          else if (lname .eq. " ") then
              ktype = 1
              call nclf_getmac_callin (mname,strlen1(mname),kline)
              kline = kline - 1
c
c......DO loop
c
          else
             itsav = ityp
             issav = ist
             tvsv = tv
             tsav = token2
             isbsv = ivxsub
             token2 = lname
             ivxsub = lsub
             call vstchk
             gindx = tv
             ktype = 2
             ityp = itsav
             ist = issav
             tv = tvsv
             token2 = tsav
             ivxsub = isbsv
          endif
          kndx = inc
c
c...Request of invalid line
c
      else
          go to 9000
      endif
c
c...End of routine
c
 8000 return
c
c...Finished going through looping stack
c
 9000 kndx = -1
      go to 8000
      end
c
c***********************************************************************
c
c   SUBROUTINE:  getxln_count (knline)
c
c   FUNCTION:  This routine returns the number of Macros/Loops on the
c              call stack + 1 (for current line).
c
c   INPUT:  none
c
c   OUTPUT: knline   I*4   D1  -  Number of lines on call stack + 1.
c
c***********************************************************************
c
      subroutine getxln_count (knline)
c
      include 'com8a.com'
c
      integer*4 knline
c
c...Return number of lines on call stack
c
      knline = 0
      if (ifl(388) .ne. 0 .and. ifl(35) .eq. 0) knline = ifl(174) + 1
      return
      end
